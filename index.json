[{"content":"Com o objetivo de aprofundar meus conhecimentos em redes, HTTP e desenvolvimento de ferramentas em linha de comando, desenvolvi o caching-proxy, um servidor proxy com cache local em Node.js.\nO projeto permite:\nRedirecionar requisições para um servidor de origem. Armazenar respostas em cache local. Retornar respostas do cache em chamadas repetidas. Adicionar cabeçalhos HTTP personalizados para indicar a origem da resposta (X-Cache: HIT ou MISS). Tecnologias utilizadas:\nNode.js para lógica principal e manipulação de arquivos. Express.js para criação do servidor HTTP. Commander.js para parsing de argumentos via CLI. Axios para fazer requisições ao servidor de origem. File System (fs) para persistência de cache local. Principais aprendizados:\nImplementação de um proxy reverso simples com cache. Uso de TTL (Time to Live) para controlar validade do cache. Construção de CLI tools personalizadas. Organização do cache por domínio e rota para evitar conflitos entre URLs diferentes. Adição dinâmica de cabeçalhos HTTP baseados na lógica de cache. Melhorias planejadas:\nSuporte a mais métodos HTTP além de GET (ex: POST, PUT). Validação do cache via ETag ou Last-Modified. Interface web para gerenciamento visual do cache. Suporte a múltiplas origens simultaneamente com isolamento seguro. Exemplo de uso via terminal:\n# Iniciar o servidor proxy node index.js --port 3000 --origin http://dummyjson.com --ttl 60 **Meu Link para o repositório:** [Repositório](https://github.com/kenjilkkk/caching-proxy) ","permalink":"http://localhost:1313/posts/proxy/","summary":"\u003cp\u003eCom o objetivo de aprofundar meus conhecimentos em redes, HTTP e desenvolvimento de ferramentas em linha de comando, desenvolvi o \u003cstrong\u003ecaching-proxy\u003c/strong\u003e, um servidor proxy com cache local em Node.js.\u003c/p\u003e\n\u003cp\u003eO projeto permite:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRedirecionar requisições para um servidor de origem.\u003c/li\u003e\n\u003cli\u003eArmazenar respostas em cache local.\u003c/li\u003e\n\u003cli\u003eRetornar respostas do cache em chamadas repetidas.\u003c/li\u003e\n\u003cli\u003eAdicionar cabeçalhos HTTP personalizados para indicar a origem da resposta (\u003ccode\u003eX-Cache: HIT\u003c/code\u003e ou \u003ccode\u003eMISS\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTecnologias utilizadas:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNode.js\u003c/strong\u003e para lógica principal e manipulação de arquivos.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExpress.js\u003c/strong\u003e para criação do servidor HTTP.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommander.js\u003c/strong\u003e para parsing de argumentos via CLI.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAxios\u003c/strong\u003e para fazer requisições ao servidor de origem.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile System (fs)\u003c/strong\u003e para persistência de cache local.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ePrincipais aprendizados:\u003c/strong\u003e\u003c/p\u003e","title":"Construção de um Servidor Proxy com Cache em Node.js"},{"content":"Com o objetivo de aprimorar meus conhecimentos em desenvolvimento web backend, desenvolvi um Expense Tracker utilizando Node.js e Express.js.\nO projeto permite aos usuários:\nCadastrar entradas de despesas. Visualizar o total de gastos acumulados. Editar e excluir transações existentes. Tecnologias utilizadas:\nExpress.js para criação do servidor e das rotas. Criação de API REST seguindo o padrão CRUD (Create, Read, Update, Delete). HTML/CSS básico para a interface inicial. JSON para armazenamento dos dados (planejo migrar para banco de dados futuramente). Principais aprendizados:\nConstrução de uma API CRUD para gerenciar despesas. Organização de rotas e controllers em uma aplicação Express.js. Manipulação de dados de forma consistente entre backend e frontend. Melhorias em andamento:\nIntegração com banco de dados (MongoDB ou SQLite). Adição de gráficos dinâmicos para visualização dos gastos mensais. Implementação de autenticação para múltiplos usuários. Exemplo de projeto:\nExpense Tracker no GitHub\nEsse projeto reforçou minha paixão por desenvolver soluções práticas que ajudem no dia a dia, além de consolidar meu aprendizado em back-end!\n","permalink":"http://localhost:1313/posts/expense/","summary":"\u003cp\u003eCom o objetivo de aprimorar meus conhecimentos em desenvolvimento web backend, desenvolvi um \u003cstrong\u003eExpense Tracker\u003c/strong\u003e utilizando \u003cstrong\u003eNode.js\u003c/strong\u003e e \u003cstrong\u003eExpress.js\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eO projeto permite aos usuários:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCadastrar entradas de despesas.\u003c/li\u003e\n\u003cli\u003eVisualizar o total de gastos acumulados.\u003c/li\u003e\n\u003cli\u003eEditar e excluir transações existentes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTecnologias utilizadas:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eExpress.js\u003c/strong\u003e para criação do servidor e das rotas.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCriação de API REST\u003c/strong\u003e seguindo o padrão CRUD (Create, Read, Update, Delete).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHTML/CSS\u003c/strong\u003e básico para a interface inicial.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eJSON\u003c/strong\u003e para armazenamento dos dados (planejo migrar para banco de dados futuramente).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ePrincipais aprendizados:\u003c/strong\u003e\u003c/p\u003e","title":"Desenvolvimento de Expense Tracker com Express.js"},{"content":"Com o objetivo de aprofundar meus conhecimentos em redes, HTTP e desenvolvimento de ferramentas em linha de comando, desenvolvi o caching-proxy, um servidor proxy com cache local em Node.js.\nO projeto permite:\nRedirecionar requisições para um servidor de origem. Armazenar respostas em cache local. Retornar respostas do cache em chamadas repetidas. Adicionar cabeçalhos HTTP personalizados para indicar a origem da resposta (X-Cache: HIT ou MISS). Tecnologias utilizadas:\nNode.js para lógica principal e manipulação de arquivos. Express.js para criação do servidor HTTP. Commander.js para parsing de argumentos via CLI. Axios para fazer requisições ao servidor de origem. File System (fs) para persistência de cache local. Principais aprendizados:\nImplementação de um proxy reverso simples com cache. Uso de TTL (Time to Live) para controlar validade do cache. Construção de CLI tools personalizadas. Organização do cache por domínio e rota para evitar conflitos entre URLs diferentes. Adição dinâmica de cabeçalhos HTTP baseados na lógica de cache. Melhorias planejadas:\nSuporte a mais métodos HTTP além de GET (ex: POST, PUT). Validação do cache via ETag ou Last-Modified. Interface web para gerenciamento visual do cache. Suporte a múltiplas origens simultaneamente com isolamento seguro. Exemplo de uso via terminal:\n# Iniciar o servidor proxy node index.js --port 3000 --origin http://dummyjson.com --ttl 60 Meu Link para o repositório: Repositório\n","permalink":"http://localhost:1313/posts/proxy/","summary":"\u003cp\u003eCom o objetivo de aprofundar meus conhecimentos em redes, HTTP e desenvolvimento de ferramentas em linha de comando, desenvolvi o \u003cstrong\u003ecaching-proxy\u003c/strong\u003e, um servidor proxy com cache local em Node.js.\u003c/p\u003e\n\u003cp\u003eO projeto permite:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRedirecionar requisições para um servidor de origem.\u003c/li\u003e\n\u003cli\u003eArmazenar respostas em cache local.\u003c/li\u003e\n\u003cli\u003eRetornar respostas do cache em chamadas repetidas.\u003c/li\u003e\n\u003cli\u003eAdicionar cabeçalhos HTTP personalizados para indicar a origem da resposta (\u003ccode\u003eX-Cache: HIT\u003c/code\u003e ou \u003ccode\u003eMISS\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTecnologias utilizadas:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNode.js\u003c/strong\u003e para lógica principal e manipulação de arquivos.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExpress.js\u003c/strong\u003e para criação do servidor HTTP.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommander.js\u003c/strong\u003e para parsing de argumentos via CLI.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAxios\u003c/strong\u003e para fazer requisições ao servidor de origem.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile System (fs)\u003c/strong\u003e para persistência de cache local.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ePrincipais aprendizados:\u003c/strong\u003e\u003c/p\u003e","title":"Construção de um Servidor Proxy com Cache em Node.js"},{"content":"Com o objetivo de aprimorar meus conhecimentos em desenvolvimento web backend, desenvolvi um Expense Tracker utilizando Node.js e Express.js.\nO projeto permite aos usuários:\nCadastrar entradas de despesas. Visualizar o total de gastos acumulados. Editar e excluir transações existentes. Tecnologias utilizadas:\nExpress.js para criação do servidor e das rotas. Criação de API REST seguindo o padrão CRUD (Create, Read, Update, Delete). HTML/CSS básico para a interface inicial. JSON para armazenamento dos dados (planejo migrar para banco de dados futuramente). Principais aprendizados:\nConstrução de uma API CRUD para gerenciar despesas. Organização de rotas e controllers em uma aplicação Express.js. Manipulação de dados de forma consistente entre backend e frontend. Melhorias em andamento:\nIntegração com banco de dados (MongoDB ou SQLite). Adição de gráficos dinâmicos para visualização dos gastos mensais. Implementação de autenticação para múltiplos usuários. Exemplo de projeto:\nExpense Tracker no GitHub\nEsse projeto reforçou minha paixão por desenvolver soluções práticas que ajudem no dia a dia, além de consolidar meu aprendizado em back-end!\n","permalink":"http://localhost:1313/posts/expense/","summary":"\u003cp\u003eCom o objetivo de aprimorar meus conhecimentos em desenvolvimento web backend, desenvolvi um \u003cstrong\u003eExpense Tracker\u003c/strong\u003e utilizando \u003cstrong\u003eNode.js\u003c/strong\u003e e \u003cstrong\u003eExpress.js\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eO projeto permite aos usuários:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCadastrar entradas de despesas.\u003c/li\u003e\n\u003cli\u003eVisualizar o total de gastos acumulados.\u003c/li\u003e\n\u003cli\u003eEditar e excluir transações existentes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTecnologias utilizadas:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eExpress.js\u003c/strong\u003e para criação do servidor e das rotas.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCriação de API REST\u003c/strong\u003e seguindo o padrão CRUD (Create, Read, Update, Delete).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHTML/CSS\u003c/strong\u003e básico para a interface inicial.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eJSON\u003c/strong\u003e para armazenamento dos dados (planejo migrar para banco de dados futuramente).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ePrincipais aprendizados:\u003c/strong\u003e\u003c/p\u003e","title":"Desenvolvimento de Expense Tracker com Express.js"},{"content":"Com o objetivo de aprofundar meus conhecimentos em redes, HTTP e desenvolvimento de ferramentas em linha de comando, desenvolvi o caching-proxy, um servidor proxy com cache local em Node.js.\nO projeto permite:\nRedirecionar requisições para um servidor de origem. Armazenar respostas em cache local. Retornar respostas do cache em chamadas repetidas. Adicionar cabeçalhos HTTP personalizados para indicar a origem da resposta (X-Cache: HIT ou MISS). Tecnologias utilizadas:\nNode.js para lógica principal e manipulação de arquivos. Express.js para criação do servidor HTTP. Commander.js para parsing de argumentos via CLI. Axios para fazer requisições ao servidor de origem. File System (fs) para persistência de cache local. Principais aprendizados:\nImplementação de um proxy reverso simples com cache. Uso de TTL (Time to Live) para controlar validade do cache. Construção de CLI tools personalizadas. Organização do cache por domínio e rota para evitar conflitos entre URLs diferentes. Adição dinâmica de cabeçalhos HTTP baseados na lógica de cache. Melhorias planejadas:\nSuporte a mais métodos HTTP além de GET (ex: POST, PUT). Validação do cache via ETag ou Last-Modified. Interface web para gerenciamento visual do cache. Suporte a múltiplas origens simultaneamente com isolamento seguro. Exemplo de uso via terminal:\n# Iniciar o servidor proxy node index.js --port 3000 --origin http://dummyjson.com --ttl 60 Meu Link para o repositório: Repositório\n","permalink":"http://localhost:1313/posts/proxy/","summary":"\u003cp\u003eCom o objetivo de aprofundar meus conhecimentos em redes, HTTP e desenvolvimento de ferramentas em linha de comando, desenvolvi o \u003cstrong\u003ecaching-proxy\u003c/strong\u003e, um servidor proxy com cache local em Node.js.\u003c/p\u003e\n\u003cp\u003eO projeto permite:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRedirecionar requisições para um servidor de origem.\u003c/li\u003e\n\u003cli\u003eArmazenar respostas em cache local.\u003c/li\u003e\n\u003cli\u003eRetornar respostas do cache em chamadas repetidas.\u003c/li\u003e\n\u003cli\u003eAdicionar cabeçalhos HTTP personalizados para indicar a origem da resposta (\u003ccode\u003eX-Cache: HIT\u003c/code\u003e ou \u003ccode\u003eMISS\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTecnologias utilizadas:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNode.js\u003c/strong\u003e para lógica principal e manipulação de arquivos.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExpress.js\u003c/strong\u003e para criação do servidor HTTP.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommander.js\u003c/strong\u003e para parsing de argumentos via CLI.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAxios\u003c/strong\u003e para fazer requisições ao servidor de origem.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile System (fs)\u003c/strong\u003e para persistência de cache local.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ePrincipais aprendizados:\u003c/strong\u003e\u003c/p\u003e","title":"Construção de um Servidor Proxy com Cache em Node.js"},{"content":"Com o objetivo de aprimorar meus conhecimentos em desenvolvimento web backend, desenvolvi um Expense Tracker utilizando Node.js e Express.js.\nO projeto permite aos usuários:\nCadastrar entradas de despesas. Visualizar o total de gastos acumulados. Editar e excluir transações existentes. Tecnologias utilizadas:\nExpress.js para criação do servidor e das rotas. Criação de API REST seguindo o padrão CRUD (Create, Read, Update, Delete). HTML/CSS básico para a interface inicial. JSON para armazenamento dos dados (planejo migrar para banco de dados futuramente). Principais aprendizados:\nConstrução de uma API CRUD para gerenciar despesas. Organização de rotas e controllers em uma aplicação Express.js. Manipulação de dados de forma consistente entre backend e frontend. Melhorias em andamento:\nIntegração com banco de dados (MongoDB ou SQLite). Adição de gráficos dinâmicos para visualização dos gastos mensais. Implementação de autenticação para múltiplos usuários. Exemplo de projeto:\nExpense Tracker no GitHub\nEsse projeto reforçou minha paixão por desenvolver soluções práticas que ajudem no dia a dia, além de consolidar meu aprendizado em back-end!\n","permalink":"http://localhost:1313/posts/expense/","summary":"\u003cp\u003eCom o objetivo de aprimorar meus conhecimentos em desenvolvimento web backend, desenvolvi um \u003cstrong\u003eExpense Tracker\u003c/strong\u003e utilizando \u003cstrong\u003eNode.js\u003c/strong\u003e e \u003cstrong\u003eExpress.js\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eO projeto permite aos usuários:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCadastrar entradas de despesas.\u003c/li\u003e\n\u003cli\u003eVisualizar o total de gastos acumulados.\u003c/li\u003e\n\u003cli\u003eEditar e excluir transações existentes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTecnologias utilizadas:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eExpress.js\u003c/strong\u003e para criação do servidor e das rotas.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCriação de API REST\u003c/strong\u003e seguindo o padrão CRUD (Create, Read, Update, Delete).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHTML/CSS\u003c/strong\u003e básico para a interface inicial.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eJSON\u003c/strong\u003e para armazenamento dos dados (planejo migrar para banco de dados futuramente).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ePrincipais aprendizados:\u003c/strong\u003e\u003c/p\u003e","title":"Desenvolvimento de Expense Tracker com Express.js"}]