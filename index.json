[{"content":"Para praticar desenvolvimento de backend com Node.js e resolver um problema real que enfrento ao escrever documenta√ß√£o, criei o md2html-checker ‚Äî uma ferramenta simples que faz checagem ortogr√°fica de arquivos Markdown (.md) em portugu√™s e gera um preview em HTML.\nO projeto permite: Fazer upload de um arquivo .md via interface web Identificar erros ortogr√°ficos no conte√∫do (sem sugerir corre√ß√µes) Gerar e exibir a vers√£o HTML equivalente do Markdown processado Rodar localmente em localhost:3000 üõ† Tecnologias utilizadas: Node.js para o servidor principal Express.js para rotas HTTP e manipula√ß√£o de arquivos marked para convers√£o de Markdown em HTML Spell-checker.js para verifica√ß√£o ortogr√°fica em portugu√™s HTML + JS b√°sico para interface de upload e visualiza√ß√£o üìö Principais aprendizados: Processamento de texto e convers√£o Markdown ‚Üí HTML no backend Integra√ß√£o de ferramentas de verifica√ß√£o ortogr√°fica em portugu√™s Manipula√ß√£o de arquivos via upload em servidores Express Cria√ß√£o de um fluxo simples com entrada do usu√°rio, an√°lise e resposta estruturada Pr√°tica de desenvolvimento web com foco em backend üîß Melhorias planejadas: Destacar os erros diretamente no preview HTML Suporte a m√∫ltiplos arquivos em sequ√™ncia Logs de an√°lise e estat√≠sticas b√°sicas de erros Refatora√ß√£o para separar rotas, l√≥gica de spellcheck e renderiza√ß√£o Link para o meu projeto ","permalink":"https://kenjilkkk.github.io/posts/md2html/","summary":"\u003cp\u003ePara praticar desenvolvimento de backend com Node.js e resolver um problema real que enfrento ao escrever documenta√ß√£o, criei o \u003cstrong\u003emd2html-checker\u003c/strong\u003e ‚Äî uma ferramenta simples que faz \u003cstrong\u003echecagem ortogr√°fica de arquivos Markdown (.md)\u003c/strong\u003e em portugu√™s e gera um \u003cstrong\u003epreview em HTML\u003c/strong\u003e.\u003c/p\u003e\n\u003ch3 id=\"o-projeto-permite\"\u003eO projeto permite:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eFazer upload de um arquivo \u003ccode\u003e.md\u003c/code\u003e via interface web\u003c/li\u003e\n\u003cli\u003eIdentificar erros ortogr√°ficos no conte√∫do (sem sugerir corre√ß√µes)\u003c/li\u003e\n\u003cli\u003eGerar e exibir a vers√£o HTML equivalente do Markdown processado\u003c/li\u003e\n\u003cli\u003eRodar localmente em \u003ccode\u003elocalhost:3000\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-tecnologias-utilizadas\"\u003eüõ† Tecnologias utilizadas:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNode.js\u003c/strong\u003e para o servidor principal\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExpress.js\u003c/strong\u003e para rotas HTTP e manipula√ß√£o de arquivos\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emarked\u003c/strong\u003e para convers√£o de Markdown em HTML\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSpell-checker.js\u003c/strong\u003e para verifica√ß√£o ortogr√°fica em portugu√™s\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHTML + JS b√°sico\u003c/strong\u003e para interface de upload e visualiza√ß√£o\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-principais-aprendizados\"\u003eüìö Principais aprendizados:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eProcessamento de texto e convers√£o Markdown ‚Üí HTML no backend\u003c/li\u003e\n\u003cli\u003eIntegra√ß√£o de ferramentas de verifica√ß√£o ortogr√°fica em portugu√™s\u003c/li\u003e\n\u003cli\u003eManipula√ß√£o de arquivos via upload em servidores Express\u003c/li\u003e\n\u003cli\u003eCria√ß√£o de um fluxo simples com entrada do usu√°rio, an√°lise e resposta estruturada\u003c/li\u003e\n\u003cli\u003ePr√°tica de desenvolvimento web com foco em backend\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"-melhorias-planejadas\"\u003eüîß Melhorias planejadas:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDestacar os erros diretamente no preview HTML\u003c/li\u003e\n\u003cli\u003eSuporte a m√∫ltiplos arquivos em sequ√™ncia\u003c/li\u003e\n\u003cli\u003eLogs de an√°lise e estat√≠sticas b√°sicas de erros\u003c/li\u003e\n\u003cli\u003eRefatora√ß√£o para separar rotas, l√≥gica de spellcheck e renderiza√ß√£o\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"link-para-o-meu-projeto\"\u003eLink para o meu \u003ca href=\"https://github.com/kenjilkkk/md2html-checker\"\u003eprojeto\u003c/a\u003e\u003c/h3\u003e","title":"md2html-checker: Checagem Ortogr√°fica de Markdown com Node.js"},{"content":"Com o objetivo de aprofundar meus conhecimentos em redes, HTTP e desenvolvimento de ferramentas em linha de comando, desenvolvi o caching-proxy, um servidor proxy com cache local em Node.js.\nO projeto permite:\nRedirecionar requisi√ß√µes para um servidor de origem. Armazenar respostas em cache local. Retornar respostas do cache em chamadas repetidas. Adicionar cabe√ßalhos HTTP personalizados para indicar a origem da resposta (X-Cache: HIT ou MISS). Tecnologias utilizadas:\nNode.js para l√≥gica principal e manipula√ß√£o de arquivos. Express.js para cria√ß√£o do servidor HTTP. Commander.js para parsing de argumentos via CLI. Axios para fazer requisi√ß√µes ao servidor de origem. File System (fs) para persist√™ncia de cache local. Principais aprendizados:\nImplementa√ß√£o de um proxy reverso simples com cache. Uso de TTL (Time to Live) para controlar validade do cache. Constru√ß√£o de CLI tools personalizadas. Organiza√ß√£o do cache por dom√≠nio e rota para evitar conflitos entre URLs diferentes. Adi√ß√£o din√¢mica de cabe√ßalhos HTTP baseados na l√≥gica de cache. Melhorias planejadas:\nSuporte a mais m√©todos HTTP al√©m de GET (ex: POST, PUT). Valida√ß√£o do cache via ETag ou Last-Modified. Interface web para gerenciamento visual do cache. Suporte a m√∫ltiplas origens simultaneamente com isolamento seguro. Exemplo de uso via terminal:\n# Iniciar o servidor proxy node index.js --port 3000 --origin http://dummyjson.com --ttl 60 Meu Link para o reposit√≥rio: Reposit√≥rio\n","permalink":"https://kenjilkkk.github.io/posts/proxy/","summary":"\u003cp\u003eCom o objetivo de aprofundar meus conhecimentos em redes, HTTP e desenvolvimento de ferramentas em linha de comando, desenvolvi o \u003cstrong\u003ecaching-proxy\u003c/strong\u003e, um servidor proxy com cache local em Node.js.\u003c/p\u003e\n\u003cp\u003eO projeto permite:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRedirecionar requisi√ß√µes para um servidor de origem.\u003c/li\u003e\n\u003cli\u003eArmazenar respostas em cache local.\u003c/li\u003e\n\u003cli\u003eRetornar respostas do cache em chamadas repetidas.\u003c/li\u003e\n\u003cli\u003eAdicionar cabe√ßalhos HTTP personalizados para indicar a origem da resposta (\u003ccode\u003eX-Cache: HIT\u003c/code\u003e ou \u003ccode\u003eMISS\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTecnologias utilizadas:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNode.js\u003c/strong\u003e para l√≥gica principal e manipula√ß√£o de arquivos.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExpress.js\u003c/strong\u003e para cria√ß√£o do servidor HTTP.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommander.js\u003c/strong\u003e para parsing de argumentos via CLI.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAxios\u003c/strong\u003e para fazer requisi√ß√µes ao servidor de origem.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile System (fs)\u003c/strong\u003e para persist√™ncia de cache local.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ePrincipais aprendizados:\u003c/strong\u003e\u003c/p\u003e","title":"Constru√ß√£o de um Servidor Proxy com Cache em Node.js"},{"content":"Com o objetivo de aprimorar meus conhecimentos em desenvolvimento web backend, desenvolvi um Expense Tracker utilizando Node.js e Express.js.\nO projeto permite aos usu√°rios:\nCadastrar entradas de despesas. Visualizar o total de gastos acumulados. Editar e excluir transa√ß√µes existentes. Tecnologias utilizadas:\nExpress.js para cria√ß√£o do servidor e das rotas. Cria√ß√£o de API REST seguindo o padr√£o CRUD (Create, Read, Update, Delete). HTML/CSS b√°sico para a interface inicial. JSON para armazenamento dos dados (planejo migrar para banco de dados futuramente). Principais aprendizados:\nConstru√ß√£o de uma API CRUD para gerenciar despesas. Organiza√ß√£o de rotas e controllers em uma aplica√ß√£o Express.js. Manipula√ß√£o de dados de forma consistente entre backend e frontend. Melhorias em andamento:\nIntegra√ß√£o com banco de dados (MongoDB ou SQLite). Adi√ß√£o de gr√°ficos din√¢micos para visualiza√ß√£o dos gastos mensais. Implementa√ß√£o de autentica√ß√£o para m√∫ltiplos usu√°rios. Exemplo de projeto:\nExpense Tracker no GitHub\nEsse projeto refor√ßou minha paix√£o por desenvolver solu√ß√µes pr√°ticas que ajudem no dia a dia, al√©m de consolidar meu aprendizado em back-end!\n","permalink":"https://kenjilkkk.github.io/posts/expense/","summary":"\u003cp\u003eCom o objetivo de aprimorar meus conhecimentos em desenvolvimento web backend, desenvolvi um \u003cstrong\u003eExpense Tracker\u003c/strong\u003e utilizando \u003cstrong\u003eNode.js\u003c/strong\u003e e \u003cstrong\u003eExpress.js\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eO projeto permite aos usu√°rios:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCadastrar entradas de despesas.\u003c/li\u003e\n\u003cli\u003eVisualizar o total de gastos acumulados.\u003c/li\u003e\n\u003cli\u003eEditar e excluir transa√ß√µes existentes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTecnologias utilizadas:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eExpress.js\u003c/strong\u003e para cria√ß√£o do servidor e das rotas.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCria√ß√£o de API REST\u003c/strong\u003e seguindo o padr√£o CRUD (Create, Read, Update, Delete).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHTML/CSS\u003c/strong\u003e b√°sico para a interface inicial.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eJSON\u003c/strong\u003e para armazenamento dos dados (planejo migrar para banco de dados futuramente).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003ePrincipais aprendizados:\u003c/strong\u003e\u003c/p\u003e","title":"Desenvolvimento de Expense Tracker com Express.js"}]